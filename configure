#!/bin/sh
config="$@"

prefix_default="/usr/local"
cc_default="gcc"
builddir_default="$(pwd)/build"

teststreams_dir_default="./CI/test_bitstreams"
teststreams_url_default="http://openvvc.insa-rennes.fr/bitstreams/JVET_CTC/all_intra/"

debug_cflags="-O0 -g -Wall --pedantic"
release_cflags="-O3 -Wall"

cflags_olevel="-O3"
cflags_warnings="-Wall"
cflags_error=
cflags_default="${cflags_warnings} ${cflags_olevel}"

sse_enabled="1"
posix_memalign="0"
aligned_malloc="0"
log_enabled="1"
is_win32="0"

show_help() {
    cat <<EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]

Options:
  --prefix=PREFIX          install in PREFIX [$prefix_default]
  --libdir=LIBDIR          install library in LIBDIR [PREFIX/lib]
  --includedir=DIR         install includes in DIR [PREFIX/include]
  --pkgconfigdir=DIR       install pkg-config files in DIR [LIBDIR/pkgconfig]
  --build-dir=DIR          build objects in DIR [$builddir_default]

  --help                   print this message


  --disable-log            disable log reportings [no]
  --disable-sse            disable sse optimizations [no]
  --disable-static         do not build static libraries [no]
  --enable-shared          build shared libraries [no]

  --cc=CC                  select compiler [$cc_default]
  --arch=ARCH              select architecture [$arch]
  --target-os=OS           compiler targets OS [$target_os]

  --cross-prefix=PREFIX    use PREFIX for compilation tools [$cross_prefix]
  --enable-cross-compile   assume a cross-compiler is used

  --cflags=CFLAGS          use CFLAGS as compiler flags [$cflags_default]
  --release                use specific release compiler flags [CFLAGS ${release_cflags}]
  --debug                  use specific debug compiler cflags [CFLAGS ${debug_cflags}]

  --teststreams-dir=DIR    read test bitstreams from DIR[$teststreams_dir_default]
  --teststreams-url=URL    download test bitstreams and md5sum from URL[$teststreams_url_default]
EOF
  exit 0
}

# Set default values
prefix=$prefix_default
libdir='${prefix}/lib'
includedir='${prefix}/include'
pkgconfigdir='${libdir}/pkgconfig'

build_dir=$builddir_default
teststreams_dir=$teststreams_dir_default
teststreams_url=$teststreams_url_default

cc=$cc_default
arch="$(uname -m)"
target_os="$(uname -s)"



# Override values set by user
for opt do
    optval="${opt#*=}"
    case "$opt" in
        --help|-h) show_help
        ;;
        --release)
            cflags="${cflags} ${release_cflags}"
        ;;
        --debug)
            cflags="${cflags} ${debug_cflags}"
        ;;
        --disable-sse)
            sse_enabled="0"
        ;;
        --disable-log)
            log_enabled="0"
        ;;
        *)
            optname="${opt%%=*}"
            optname="${optname#--}"
            optname=$(echo "$optname" | sed 's/-/_/g')
            eval $optname='$optval'
        ;;
    esac
done

if [ -z "$cflags" ] ; then
    cflags="$cflags_default"
fi

# Select arch var according to common arch names
is_arm="0"
is_x86="0"
case "$arch" in
    arm*)
        arch="arm"
        is_arm="1"
    ;;
    i[3-6]86*|x86_64|x86_32|amd64)
        arch="x86"
        is_x86="1"
    ;;
		*)
		echo "Unsupported archictecture $arch"
		exit 1.
		;;
esac

case $target_os in
    *win32|*win64)
    shlib_suffix=".dll"
    stlib_suffix=".lib"
    aligned_malloc="1"
    is_win32="1"
    ;;
    *)
    shlib_suffix=".so"
    stlib_suffix=".a"
    # Append PIC flag for shared lib
    cflags="${cflags} -fPIC"
    posix_memalign="1"
    ;;
esac

cc="${cross_prefix}${cc}"
ar="${cross_prefix}ar"
ranlib="${cross_prefix}ranlib"


cat > config.mak <<EOF
OVVC_CONFIG="${config}"
CC=${cc}
AR=${ar}
RANLIB=${ranlib}
ARCH=${arch}
CFLAGS=${cflags}
SSE_CFLAGS= -mssse3 -msse4.1
SHARED_LIBSUFF:=${shlib_suffix}
STATIC_LIBSUFF:=${stlib_suffix}
BUILDDIR=${build_dir}

TESTSTREAMSDIR=$teststreams_dir_default
STREAMURL=$teststreams_url

INSTALL_PREFIX=${prefix}
INSTALL_LIB=\$(INSTALL_PREFIX)/lib/libopenvvc
INSTALL_INCLUDE=\$(INSTALL_PREFIX)/include/libopenvvc
INSTALL_PKGCONFIG=\$(INSTALL_PREFIX)/lib/pkgconfig
INSTALL_BIN=\$(INSTALL_PREFIX)/bin
EOF

cat > config.sh <<EOF
INSTALL_PREFIX=${prefix}
INSTALL_LIB=\${INSTALL_PREFIX}/lib/libopenvvc
INSTALL_INCLUDE=\${INSTALL_PREFIX}/include/libopenvvc
INSTALL_PKGCONFIG=\${INSTALL_PREFIX}/lib/pkgconfig
INSTALL_BIN=\${INSTALL_PREFIX}/bin
EOF

cat > libovvc/ovconfig.h <<EOF
#define _WIN32 $is_win32

#define ARCH_X86 $is_x86
#define SSE_ENABLED $sse_enabled
#define AVX_ENABLED 0
#define ARCH_ARM $is_arm
#define NEON_ENABLED 0

#define HAVE_POSIX_MEMALIGN $posix_memalign
#define HAVE_ALIGNED_MALLOC $aligned_malloc

#define ENABLE_LOG $log_enabled
EOF


exit 0
