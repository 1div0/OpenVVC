#!/bin/sh
config="$@"

prefix_default="/usr/local"
cc_default="gcc"
builddir_default="$(pwd)/build"
srcdir_default="$(pwd)/"

teststreams_dir_default="$(pwd)/CI/test_bitstreams/random_access/"
teststreams_url_default="http://openvvc.insa-rennes.fr/bitstreams/JVET_CTC/random_access/"

debug_cflags="-O0 -g -Wall --pedantic"
release_cflags="-O3 -Wall"

cflags_olevel="-O3"
cflags_warnings="-Wall"
cflags_error=
cflags_default="${cflags_warnings} ${cflags_olevel}"

ldflags_default=""

sse_enabled="1"
neon_enabled="1"
posix_memalign="0"
aligned_malloc="0"
log_enabled="1"
is_win32="0"

slhdr_enabled="0"

show_help() {
    cat <<EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]

Options:
  --prefix=PREFIX          install in PREFIX [$prefix_default]
  --libdir=LIBDIR          install library in LIBDIR [PREFIX/lib]
  --includedir=DIR         install includes in DIR [PREFIX/include]
  --pkgconfigdir=DIR       install pkg-config files in DIR [LIBDIR/pkgconfig]
  --build-dir=DIR          build objects in DIR [$builddir_default]
  --src-dir=DIR            build objects in DIR [$srcdir_default]

  --help                   print this message


  --disable-log            disable log reportings [no]
  --disable-sse            disable sse optimizations [no]
  --disable-neon           disable neon optimizations [no]
  --disable-static         do not build static libraries [no]
  --enable-shared          build shared libraries [no]

  --enable-slhdr           build slhdr feature [no]

  --cc=CC                  select compiler [$cc_default]
  --arch=ARCH              select architecture [$arch]
  --target-os=OS           compiler targets OS [$target_os]

  --cross-prefix=PREFIX    use PREFIX for compilation tools [$cross_prefix]
  --sysroot=SYSROOT        use define sysroot path
  --enable-cross-compile   assume a cross-compiler is used

  --cflags=CFLAGS          use CFLAGS as compiler flags [$cflags_default]
  --ldflags=LDFLAGS          use CFLAGS as compiler flags [$ldflags_default]
  --release                use specific release compiler flags [CFLAGS ${release_cflags}]
  --debug                  use specific debug compiler cflags [CFLAGS ${debug_cflags}]

  --teststreams-dir=DIR    read test bitstreams from DIR[$teststreams_dir_default]
  --teststreams-url=URL    download test bitstreams and md5sum from URL[$teststreams_url_default]
EOF
  exit 0
}

# Set default values
prefix=$prefix_default
libdir='${prefix}/lib'
includedir='${prefix}/include'
pkgconfigdir='${libdir}/pkgconfig'

build_dir=$builddir_default
src_dir=$srcdir_default
teststreams_dir=$teststreams_dir_default
teststreams_url=$teststreams_url_default

cc=$cc_default
arch="$(uname -m)"
target_os="$(uname -s)"



# Override values set by user
for opt do
    optval="${opt#*=}"
    case "$opt" in
        --help|-h) show_help
        ;;
        --release)
            cflags="${cflags} ${release_cflags}"
        ;;
        --debug)
            cflags="${cflags} ${debug_cflags}"
        ;;
        --disable-sse)
            sse_enabled="0"
        ;;
        --disable-neon)
            neon_enabled="0"
        ;;
        --disable-log)
            log_enabled="0"
        ;;
        --enable-slhdr)
            slhdr_enabled="1"
        ;;
        *)
            optname="${opt%%=*}"
            optname="${optname#--}"
            optname=$(echo "$optname" | sed 's/-/_/g')
            eval $optname='$optval'
        ;;
    esac
done

# Create build directory if it doesn't exist
[ -d $build_dir ] || mkdir -p $build_dir
# cat >> Makefile <<EOF
# cd $build_dir
# EOF

# Force path to absolute
build_dir=$( cd $build_dir; pwd )

# Copy Makefile to build directory
cp Makefile.in $build_dir/Makefile

if [ -z "$cflags" ] ; then
    cflags="$cflags_default"
fi

if [ -z "$ldflags" ] ; then
    ldflags="$ldflags_default"
fi



# Select arch var according to common arch names
is_arm64="0"
is_arm="0"
is_x86="0"
target_and=""
target_ios=""

case "$arch" in
    aarch64|arm64)
        cflags="${cflags} -march=armv8-a"
        ldflags="${ldflags} -arch armv8"
        target_and="aarch64"
        target_ios="aarch64"
        build_arch="arm"
        is_arm64="1"
        is_arm="1"
        sse_enabled="0"
        sse_cflags=""
    ;;

    arm)
        cflags="${cflags} -march=armv7-a"
        ldflags="${ldflags} -arch armv7"
        target_and="armv7-a"
        target_ios="armv7"
        build_arch="arm"
        is_arm="1"
        sse_enabled="0"
        sse_cflags=""
    ;;

    x86_64|amd64)
        cflags="${cflags}"
        build_arch="x86"
        is_x86="1"
        neon_enabled="0"
    ;;

    i[3-6]86*|x86_32)
        cflags="${cflags}"
        build_arch="x86"
        is_x86="1"
        neon_enabled="0"
    ;;

	*)
   echo "Unsupported archictecture $arch"
   exit 1.
;;
esac
cc_cross_prefix=${cross_prefix}
add_prefix="0"

case $target_os in
    *win32|*win64)
        ldflags="${ldflags} -lpthread"
        shlib_suffix=".dll"
        stlib_suffix=".lib"
        aligned_malloc="1"
        is_win32="1"
    ;;
      Darwin|darwin|macos|macOS)
        shlib_suffix=".so"
        stlib_suffix=".a"
        cflags="${cflags} -fPIC --target=${target_ios}-apple-darwin"
        ldflags="${ldflags}"
        posix_memalign="1"
        add_prefix="1"
    ;;
      iOS|ios)
        shlib_suffix=".so"
        stlib_suffix=".a"
        cflags="${cflags} -fPIC --target=${target_ios}-apple-darwin -miphoneos-version-min=9.0 -isysroot ${sysroot}"
        ldflags="${ldflags} -lpthread -isysroot ${sysroot}"
        posix_memalign="1"
        add_prefix="1"
    ;;
      Android|android)
        cflags="${cflags} -fPIC --target=${target_and}-none-linux-android21 --sysroot=${sysroot}"
        ldflags="${ldflags} -fPIE -pie -Wl,--no-undefined"
        shlib_suffix=".so"
        stlib_suffix=".a"
        cc_cross_prefix=${cross_prefix}21-
        cross_prefix=${cross_prefix}-
        posix_memalign="1"
    ;;
      *)
        cflags="${cflags} -fPIC"
        ldflags="${ldflags} -lpthread"
        shlib_suffix=".so"
        stlib_suffix=".a"
        posix_memalign="1"
    ;;
esac

cc="${cc_cross_prefix}${cc}"
ar="ar"
ranlib="ranlib"


cat > ${build_dir}/config.mak <<EOF
OVVC_CONFIG="${config}"
CC=${cc}
AR=${ar}
RANLIB=${ranlib}
ARCH=${build_arch}
CFLAGS=${cflags}
LD_FLAGS=${ldflags}
SSE_CFLAGS= ${sse_cflags}
SHARED_LIBSUFF:=${shlib_suffix}
STATIC_LIBSUFF:=${stlib_suffix}
SRC_PATH=${src_dir}
BUILDDIR=${build_dir}

TESTSTREAMSDIR=$teststreams_dir_default
STREAMURL=$teststreams_url

INSTALL_PREFIX=${prefix}
INSTALL_LIB=\$(INSTALL_PREFIX)/lib/libopenvvc
INSTALL_INCLUDE=\$(INSTALL_PREFIX)/include/libopenvvc
INSTALL_PKGCONFIG=\$(INSTALL_PREFIX)/lib/pkgconfig
INSTALL_BIN=\$(INSTALL_PREFIX)/bin

EOF

test_slhdr() {
  pkg-config --exists slhdr_cwrap && return 0 || slhdr_enabled="0" && return 1
}

set_slhdr() {
  EXTRA_LD_FLAGS=$(pkg-config --libs slhdr_cwrap)
  EXTRA_CFLAGS=$(pkg-config --cflags slhdr_cwrap)
  cat >> ${build_dir}/config.mak <<EOF
EXTRA_CFLAGS=${EXTRA_CFLAGS}
EXTRA_LD_FLAGS=${EXTRA_LD_FLAGS}
EOF
}

if [ ${slhdr_enabled} = "1" ] ; then
  test_slhdr && set_slhdr || { echo "SL-HDR C wrapper not found" && exit 1 ; }
fi

cat > ${build_dir}/config.sh <<EOF
INSTALL_PREFIX=${prefix}
INSTALL_LIB=\${INSTALL_PREFIX}/lib/libopenvvc
INSTALL_INCLUDE=\${INSTALL_PREFIX}/include/libopenvvc
INSTALL_PKGCONFIG=\${INSTALL_PREFIX}/lib/pkgconfig
INSTALL_BIN=\${INSTALL_PREFIX}/bin
EXTRA_CFLAGS="${EXTRA_CFLAGS}"
EXTRA_LD_FLAGS="${EXTRA_LD_FLAGS}"
EOF

cat > ${build_dir}/ovconfig.h <<EOF
#define _WIN32 $is_win32

#define ARCH_X86 $is_x86
#define SSE_ENABLED $sse_enabled
#define AVX_ENABLED 0
#define ARCH_ARM $is_arm
#define NEON_ENABLED $neon_enabled
#define ARCH_AARCH64 $is_arm64
#define ARCH_AARCH64_ASSEMBLY 1
#define PREFIX $add_prefix

#define HAVE_POSIX_MEMALIGN $posix_memalign
#define HAVE_ALIGNED_MALLOC $aligned_malloc

#define ENABLE_LOG $log_enabled

#define ENABLE_SLHDR $slhdr_enabled

EOF


exit 0
